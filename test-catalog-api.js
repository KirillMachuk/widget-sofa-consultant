// –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–∞—Ç–∞–ª–æ–≥–∞
// –ó–∞–ø—É—Å–∫: node test-catalog-api.js

async function testCatalogAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–∞—Ç–∞–ª–æ–≥–∞...\n');
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    const catalogModule = require('./api/catalog');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π mock –¥–ª—è req/res
    const mockReq = {
      method: 'POST',
      body: JSON.stringify({
        action: 'search',
        query: '–¥–∏–≤–∞–Ω –µ–≤—Ä–æ–∫–Ω–∏–∂–∫–∞',
        filters: { limit: 5 }
      })
    };
    
    // –ü–∞—Ä—Å–∏–º body –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º API
    mockReq.body = JSON.parse(mockReq.body);
    
    let responseData = null;
    const mockRes = {
      setHeader: () => {},
      status: (code) => ({
        json: (data) => {
          responseData = data;
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç API –∫–∞—Ç–∞–ª–æ–≥–∞:');
          console.log('   success:', data.success);
          console.log('   totalFound:', data.totalFound);
          console.log('   formattedForGPT length:', data.formattedForGPT ? data.formattedForGPT.length : 'null');
          console.log('   offers count:', data.offers ? data.offers.length : 'null');
          
          if (data.formattedForGPT) {
            console.log('\nüìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è GPT:');
            console.log(data.formattedForGPT);
          }
          
          if (data.offers && data.offers.length > 0) {
            console.log('\nüõãÔ∏è –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
            data.offers.slice(0, 3).forEach((offer, i) => {
              console.log(`   ${i+1}. ${offer.name} - ${offer.price} ${offer.currency}`);
            });
          }
        },
        end: () => {}
      }),
      json: (data) => {
        responseData = data;
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç API –∫–∞—Ç–∞–ª–æ–≥–∞ (200):');
        console.log('   success:', data.success);
        console.log('   totalFound:', data.totalFound);
        console.log('   formattedForGPT length:', data.formattedForGPT ? data.formattedForGPT.length : 'null');
        console.log('   offers count:', data.offers ? data.offers.length : 'null');
        
        if (data.formattedForGPT) {
          console.log('\nüìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è GPT:');
          console.log(data.formattedForGPT);
        }
      }
    };
    
    await catalogModule(mockReq, mockRes);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ API:', error.message);
    console.error('–°—Ç–µ–∫:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫
testCatalogAPI().catch(console.error);
