// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Redis –∫–ª–∏–µ–Ω—Ç —á—Ç–æ –∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
const { Redis } = require('@upstash/redis');
const redis = new Redis({
  url: process.env.KV_REST_API_URL,
  token: process.env.KV_REST_API_TOKEN,
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Redis
async function saveContacts(sessionId, contacts) {
  try {
    const chatKey = `chat:${sessionId}`;
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    let session = await redis.get(chatKey);
    if (session) {
      session.contacts = contacts;
      session.lastUpdated = new Date().toISOString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Redis
      await redis.set(chatKey, session);
      console.log('–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
      return true;
    }
    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Redis:', error);
    return false;
  }
}

async function handler(req, res){
  // Add CORS headers for external domains
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') return res.status(405).end();
  try{
    const { gas_url, timestamp, name, phone, pretext, page_url, session_id } = req.body || {};
    if (!gas_url) return res.status(400).json({ error: 'Missing gas_url' });
    const payload = { timestamp, name, phone, pretext, page_url, session_id };
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è Google Apps Script
    const maxRetries = 3;
    let lastError = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç (—É–º–µ–Ω—å—à–µ–Ω)
      
      try {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ GAS (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
        
        const r = await fetch(gas_url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        const text = await r.text();
        if (!r.ok){
          throw new Error(`GAS upstream error: ${r.status} - ${text.slice(0, 200)}`);
        }
        
        console.log(`‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GAS (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        lastError = null; // –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ retry
        
      } catch (error) {
        clearTimeout(timeoutId);
        lastError = error;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error.message);
        
        if (attempt === maxRetries) {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
          if (error.name === 'AbortError') {
            return res.status(504).json({ error: 'Request timeout to Google Apps Script' });
          }
          return res.status(502).json({ error: 'GAS upstream error', details: error.message });
        }
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s
        const delay = 1000 * Math.pow(2, attempt - 1);
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    if (lastError) {
      return res.status(502).json({ error: 'All retry attempts failed', details: lastError.message });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GAS
    if (session_id) {
      await saveContacts(session_id, {
        name: name || '',
        phone: phone || '',
        pretext: pretext || '',
        page_url: page_url || '',
        timestamp: timestamp || new Date().toISOString()
      });
    }
    
    // Try to parse JSON, fallback to text
    try{ 
      return res.status(200).json({ ok: true, message: 'Lead saved successfully' }); 
    }
    catch(e){ 
      return res.status(200).json({ ok: true, message: 'Lead saved successfully' }); 
    }
  }catch(e){
    return res.status(500).json({ error: String(e) });
  }
}

module.exports = handler;