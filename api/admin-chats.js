// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Redis –∫–ª–∏–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
const redisClient = require('../utils/redis-client');

// –ß–∏—Ç–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SCAN (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
async function readChats() {
  try {
    console.log('üîç –°–∫–∞–Ω–∏—Ä—É–µ–º Redis –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –≤–º–µ—Å—Ç–æ keys() –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const keys = await redisClient.getAllKeys('chat:*', 50); // batch size 50
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –≤ Redis: ${keys.length}`);
    
    if (keys.length === 0) {
      return [];
    }
    
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const sessions = await redisClient.mget(...keys);
    const validSessions = sessions.filter(session => session !== null);
    console.log(`–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–µ—Å—Å–∏–π: ${validSessions.length}`);
    
    return validSessions;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏–∑ Redis:', error);
    return [];
  }
}

module.exports = async function handler(req, res) {
  // Add CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'GET' && req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –∫ admin-chats:', req.method, req.url);
    
    // –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
    const chats = await readChats();
    console.log('–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –≤ Redis:', chats.length);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedSessions = chats.map(session => ({
      id: session.sessionId,
      createdAt: session.createdAt,
      lastUpdated: session.lastUpdated,
      prompt: session.prompt,
      locale: session.locale,
      contacts: session.contacts || null,
      messageCount: session.messages ? session.messages.length : 0,
      lastMessage: session.messages && session.messages.length > 0 
        ? session.messages[session.messages.length - 1] 
        : null,
      hasContacts: !!(session.contacts && (session.contacts.name || session.contacts.phone))
    }));
    
    return res.status(200).json({
      success: true,
      sessions: formattedSessions,
      total: formattedSessions.length
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤',
      error: error.message 
    });
  }
};