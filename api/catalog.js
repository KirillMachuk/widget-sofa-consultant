// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YML –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–ª–∏–µ–Ω—Ç–∞
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å –≤–Ω–µ—à–Ω–µ–≥–æ URL, –ø–∞—Ä—Å–∏—Ç XML, –∫–µ—à–∏—Ä—É–µ—Ç –≤ Upstash Redis –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã

// –ò–º–ø–æ—Ä—Ç Upstash Redis
const { Redis } = require('@upstash/redis');
const redis = new Redis({
  url: process.env.KV_REST_API_URL,
  token: process.env.KV_REST_API_TOKEN,
});

const CATALOG_URL = 'https://nm-shop.by/index.php?route=extension/feed/yandex_yml_cht';
const CATALOG_CACHE_KEY = 'catalog:main';
const CATALOG_METADATA_KEY = 'catalog:metadata';
const CACHE_DURATION_SECONDS = 24 * 60 * 60; // 24 —á–∞—Å–∞
const FETCH_TIMEOUT_MS = 8000; // 8 —Å–µ–∫—É–Ω–¥ - —É—Å–ø–µ–µ–º –¥–æ –ª–∏–º–∏—Ç–∞ Vercel

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ KV –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ
async function getCatalog() {
  try {
    // 1. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Redis
    const cached = await redis.get(CATALOG_CACHE_KEY);
    const metadata = await redis.get(CATALOG_METADATA_KEY);
    
    if (cached && metadata) {
      console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Redis:', {
        totalOffers: cached.totalCount,
        lastUpdate: metadata.lastUpdate,
        age: Date.now() - metadata.timestamp
      });
      return cached;
    }
    
    // 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ Redis - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∞–π—Ç–∞
    console.log('‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∞–π—Ç–∞...');
    const freshCatalog = await fetchCatalog();
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –Ω–∞ 24 —á–∞—Å–∞
    await redis.setex(CATALOG_CACHE_KEY, CACHE_DURATION_SECONDS, freshCatalog);
    await redis.setex(CATALOG_METADATA_KEY, CACHE_DURATION_SECONDS, {
      lastUpdate: freshCatalog.timestamp,
      timestamp: Date.now()
    });
    
    console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–∞–π—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis');
    return freshCatalog;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º:', error);
    
    // Fallback: –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—å —Å—Ç–∞—Ä—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ Redis (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—Ä–æ–∫)
    try {
      const oldCached = await redis.get(CATALOG_CACHE_KEY);
      if (oldCached) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ Redis (graceful degradation)');
        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        oldCached.isStale = true;
        oldCached.fallbackReason = 'Fresh catalog unavailable, using cached version';
        return oldCached;
      }
    } catch (redisError) {
      console.error('‚ùå Redis —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
    console.log('‚ùå –ü–æ–ª–Ω—ã–π fallback: –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return {
      offers: [],
      categories: {},
      totalCount: 0,
      timestamp: new Date().toISOString(),
      error: 'Catalog unavailable',
      isStale: true,
      fallbackReason: 'No catalog data available'
    };
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Å–∞–π—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
async function fetchCatalog() {
  const maxRetries = 3;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), FETCH_TIMEOUT_MS); // 8 —Å–µ–∫—É–Ω–¥
    
    try {
      console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å ${CATALOG_URL} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
      
      const response = await fetch(CATALOG_URL, {
        signal: controller.signal,
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; WidgetBot/1.0)',
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const xmlText = await response.text();
      console.log(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${Math.round(xmlText.length / 1024)} KB`);
      
      return parseYML(xmlText);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error.message);
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
      const delay = 1000 * Math.pow(2, attempt - 1);
      console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ YML –≤ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
function parseYML(xmlText) {
  // –ü—Ä–æ—Å—Ç–æ–π XML –ø–∞—Ä—Å–µ—Ä –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Node.js
  let parser;
  if (typeof DOMParser !== 'undefined') {
    // –ë—Ä–∞—É–∑–µ—Ä
    parser = new DOMParser();
  } else {
    // Node.js (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    // –í Vercel –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    return parseYMLNode(xmlText);
  }
  
  const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
  const parserError = xmlDoc.querySelector('parsererror');
  if (parserError) {
    throw new Error('XML parsing error: ' + parserError.textContent);
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categories = {};
  const categoryElements = xmlDoc.querySelectorAll('category');
  categoryElements.forEach(cat => {
    const id = cat.getAttribute('id');
    const name = cat.textContent.trim();
    categories[id] = name;
  });
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const offers = [];
  const offerElements = xmlDoc.querySelectorAll('offer');
  
  offerElements.forEach(offer => {
    const offerId = offer.getAttribute('id');
    const available = offer.getAttribute('available') === 'true';
    
    if (!available) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    
    const getTextContent = (selector) => {
      const el = offer.querySelector(selector);
      return el ? el.textContent.trim() : null;
    };
    
    const getParam = (paramName) => {
      const params = offer.querySelectorAll('param');
      for (let param of params) {
        if (param.getAttribute('name') === paramName) {
          return param.textContent.trim();
        }
      }
      return null;
    };
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const params = {};
    const paramElements = offer.querySelectorAll('param');
    paramElements.forEach(param => {
      const name = param.getAttribute('name');
      const value = param.textContent.trim();
      if (name && value) {
        params[name] = value;
      }
    });
    
    const offerData = {
      id: offerId,
      name: getTextContent('name'),
      price: parseFloat(getTextContent('price')) || 0,
      oldPrice: parseFloat(getTextContent('oldprice')) || null,
      currency: getTextContent('currencyId') || 'BYN',
      categoryId: getTextContent('categoryId'),
      category: categories[getTextContent('categoryId')] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      url: getTextContent('url'),
      picture: getTextContent('picture'),
      description: getTextContent('description'),
      vendor: getTextContent('vendor'),
      model: getTextContent('model'),
      available: true,
      params: params
    };
    
    offers.push(offerData);
  });
  
  console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', offers.length);
  console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–π:', Object.keys(categories).length);
  
  return {
    offers,
    categories,
    totalCount: offers.length,
    timestamp: new Date().toISOString()
  };
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Node.js (Vercel)
function parseYMLNode(xmlText) {
  // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
  const offers = [];
  const categories = {};
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é regex
  const categoryRegex = /<category id="([^"]+)">([^<]+)<\/category>/g;
  let match;
  while ((match = categoryRegex.exec(xmlText)) !== null) {
    categories[match[1]] = match[2].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã
  const offerRegex = /<offer[^>]*id="([^"]*)"[^>]*available="true"[^>]*>([\s\S]*?)<\/offer>/g;
  
  while ((match = offerRegex.exec(xmlText)) !== null) {
    const offerId = match[1];
    const offerContent = match[2];
    
    const extractTag = (tag) => {
      const regex = new RegExp(`<${tag}[^>]*>([^<]*)<\/${tag}>`, 'i');
      const m = offerContent.match(regex);
      return m ? m[1].trim() : null;
    };
    
    const extractParams = () => {
      const params = {};
      const paramRegex = /<param name="([^"]+)"[^>]*>([^<]*)<\/param>/g;
      let paramMatch;
      while ((paramMatch = paramRegex.exec(offerContent)) !== null) {
        params[paramMatch[1]] = paramMatch[2].trim();
      }
      return params;
    };
    
    const categoryId = extractTag('categoryId');
    
    offers.push({
      id: offerId,
      name: extractTag('name'),
      price: parseFloat(extractTag('price')) || 0,
      oldPrice: parseFloat(extractTag('oldprice')) || null,
      currency: extractTag('currencyId') || 'BYN',
      categoryId: categoryId,
      category: categories[categoryId] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      url: extractTag('url'),
      picture: extractTag('picture'),
      description: extractTag('description'),
      vendor: extractTag('vendor'),
      model: extractTag('model'),
      available: true,
      params: extractParams()
    });
  }
  
  console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', offers.length);
  
  return {
    offers,
    categories,
    totalCount: offers.length,
    timestamp: new Date().toISOString()
  };
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è getCatalog() —Å KV

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
function detectCategory(query) {
  const queryLower = query.toLowerCase();
  console.log(`üîç detectCategory: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å "${query}"`);
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –º–µ–±–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const furnitureKeywords = {
    '—Å—Ç—É–ª': ['—Å—Ç—É–ª', '—Å—Ç—É–ª—å', '—Ç–∞–±—É—Ä–µ—Ç', '—Å—Ç—É–ª–∞', '—Å—Ç—É–ª—å—è', '—Å—Ç—É–ª—å–µ–≤', '—Å—Ç—É–ª–æ–º', '—Å—Ç—É–ª–∞–º–∏', '—Å—Ç—É–ª—å—è–º–∏'],
    '—Å—Ç–æ–ª': ['—Å—Ç–æ–ª', '—Å—Ç–æ–ª–∏–∫', '–æ–±–µ–¥–µ–Ω–Ω', '—Å—Ç–æ–ª–∞', '—Å—Ç–æ–ª—ã', '—Å—Ç–æ–ª–æ–≤', '—Å—Ç–æ–ª–æ–º', '—Å—Ç–æ–ª–∞–º–∏'],
    '–¥–∏–≤–∞–Ω': ['–¥–∏–≤–∞–Ω', '—Å–æ—Ñ–∞', '–∫—É—à–µ—Ç–∫', '–¥–∏–≤–∞–Ω–∞', '–¥–∏–≤–∞–Ω—ã', '–¥–∏–≤–∞–Ω–æ–≤', '–¥–∏–≤–∞–Ω–æ–º', '–¥–∏–≤–∞–Ω–∞–º–∏'],
    '–∫—Ä–µ—Å–ª–æ': ['–∫—Ä–µ—Å–ª', '–ø–æ–¥–≤–µ—Å–Ω', '–∫–∞—á–µ–ª', '–∫–æ–∫–æ–Ω', '–ø–æ–¥–≤–µ—Å–Ω–æ–µ –∫—Ä–µ—Å–ª–æ', '–ø–æ–¥–≤–µ—Å–Ω–æ–µ', '–∫–∞—á–µ–ª–∏', '–∫—Ä–µ—Å–ª–∞', '–∫—Ä–µ—Å–µ–ª', '–∫—Ä–µ—Å–ª–æ–º', '–∫—Ä–µ—Å–ª–∞–º–∏'],
    '–∫—Ä–æ–≤–∞—Ç—å': ['–∫—Ä–æ–≤–∞—Ç—å', '–∫—Ä–æ–≤–∞—Ç–∏', '—Å–ø–∞–ª—å–Ω', '–º–∞—Ç—Ä–∞—Å', '–∫—Ä–æ–≤–∞—Ç–µ–π', '–∫—Ä–æ–≤–∞—Ç—å—é', '–∫—Ä–æ–≤–∞—Ç—è–º–∏'],
    '—à–∫–∞—Ñ': ['—à–∫–∞—Ñ', '–≥–∞—Ä–¥–µ—Ä–æ–±', '–∫—É–ø–µ', '—à–∫–∞—Ñ–∞', '—à–∫–∞—Ñ—ã', '—à–∫–∞—Ñ–æ–≤', '—à–∫–∞—Ñ–æ–º', '—à–∫–∞—Ñ–∞–º–∏'],
    '–ø—É—Ñ': ['–ø—É—Ñ', '–±–∞–Ω–∫–µ—Ç', '–æ—Ç—Ç–æ–º–∞–Ω', '–±–∞–Ω–∫–µ—Ç–∫–∞', '–ø—É—Ñ–∞', '–ø—É—Ñ—ã', '–ø—É—Ñ–æ–≤', '–ø—É—Ñ–æ–º', '–ø—É—Ñ–∞–º–∏'],
    '—Ç—É–º–±–∞': ['—Ç—É–º–±', '–∫–æ–º–æ–¥', '—Ç—É–º–±—ã', '—Ç—É–º–±–æ–π', '—Ç—É–º–±–∞–º–∏'],
  };
  
  // –°–ù–ê–ß–ê–õ–ê –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–µ–±–µ–ª—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  for (const [category, keywords] of Object.entries(furnitureKeywords)) {
    const foundKeywords = keywords.filter(keyword => queryLower.includes(keyword));
    if (foundKeywords.length > 0) {
      console.log(`üîç detectCategory: –Ω–∞–π–¥–µ–Ω–∞ –º–µ–±–µ–ª—å "${category}" –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:`, foundKeywords);
      console.log(`üìù –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å:`, query);
      return category;
    }
  }
  
  // –ü–û–¢–û–ú –∏—â–µ–º –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ–±–µ–ª–∏)
  const roomKeywords = {
    '–∫—É—Ö–Ω—è': ['–∫—É—Ö–Ω', '–∫—É—Ö–æ–Ω–Ω', '–≥–∞—Ä–Ω–∏—Ç—É—Ä'],
    '–ø—Ä–∏—Ö–æ–∂–∞—è': ['–ø—Ä–∏—Ö–æ–∂', '–≤–µ—à–∞–ª–∫', '–ø—Ä–∏—Ö–æ–∂–µ–π', '–ø—Ä–∏—Ö–æ–∂—É—é'],
  };
  
  for (const [category, keywords] of Object.entries(roomKeywords)) {
    const foundKeywords = keywords.filter(keyword => queryLower.includes(keyword));
    if (foundKeywords.length > 0) {
      console.log(`üîç detectCategory: –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ "${category}" –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:`, foundKeywords);
      console.log(`üìù –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å:`, query);
      return category;
    }
  }
  
  console.log('‚ö†Ô∏è detectCategory: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', query);
  console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç—É–ª—å–µ–≤:', furnitureKeywords['—Å—Ç—É–ª']);
  return null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function extractQuantity(query) {
  const queryLower = query.toLowerCase();
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "4 —Å—Ç—É–ª–∞", "–Ω—É–∂–µ–Ω 3 —Å—Ç—É–ª–∞", "–∫—É–ø–∏—Ç—å 5 —Å—Ç—É–ª—å–µ–≤"
  const patterns = [
    /(\d+)\s*(?:—Å—Ç—É–ª|—Å—Ç—É–ª—å|—Å—Ç—É–ª–∞|—Å—Ç—É–ª—å–µ–≤|—Å—Ç—É–ª—å—è|–∫—Ä–µ—Å–ª|–¥–∏–≤–∞–Ω|—Å—Ç–æ–ª)/i,
    /(?:–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–æ|–∫—É–ø–∏—Ç—å|—Ö–æ—á—É)\s*(\d+)/i
  ];
  
  for (const pattern of patterns) {
    const match = query.match(pattern);
    if (match) {
      const quantity = parseInt(match[1]);
      console.log(`üî¢ extractQuantity: –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${quantity} –≤ –∑–∞–ø—Ä–æ—Å–µ:`, query.substring(0, 100));
      return quantity;
    }
  }
  
  console.log(`üî¢ extractQuantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:`, query.substring(0, 100));
  return 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç—É–∫–∞
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
function getPricePerUnit(offer) {
  const name = (offer.name || '').toLowerCase();
  
  // –ò—â–µ–º "2 —à—Ç", "3 —à—Ç" –∏ —Ç.–¥. –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  const match = name.match(/(\d+)\s*—à—Ç/);
  if (match) {
    const quantity = parseInt(match[1]);
    const pricePerUnit = offer.price / quantity;
    console.log(`üí∞ getPricePerUnit: ${offer.name} - ${offer.price} BYN –∑–∞ ${quantity} —à—Ç = ${pricePerUnit.toFixed(0)} BYN/—à—Ç`);
    return pricePerUnit;
  }
  
  console.log(`üí∞ getPricePerUnit: ${offer.name} - ${offer.price} BYN –∑–∞ 1 —à—Ç`);
  return offer.price; // –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–Ω–µ
function detectPriceIntent(query) {
  const queryLower = query.toLowerCase();
  
  if (queryLower.includes('—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π') || 
      queryLower.includes('—Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π') ||
      queryLower.includes('–¥–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ') ||
      queryLower.includes('–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞') ||
      queryLower.includes('—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Å—Ç—É–ª') ||
      queryLower.includes('—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –¥–∏–≤–∞–Ω')) {
    console.log(`üéØ detectPriceIntent: –Ω–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –≤:`, query.substring(0, 100));
    return 'cheapest'; // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
  }
  
  console.log(`üéØ detectPriceIntent: –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤:`, query.substring(0, 100));
  return 'variety'; // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ (–¥–µ—à–µ–≤—ã–π + —Å—Ä–µ–¥–Ω–∏–π + –¥–æ—Ä–æ–≥–æ–π)
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function extractDimensions(query) {
  const dimensions = [];
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "200*95*95", "200x95x95", "200 –Ω–∞ 95 –Ω–∞ 95", "200 95 95"
  const patterns = [
    /(\d+)[*x√ó]\s*(\d+)[*x√ó]\s*(\d+)/g,  // 200*95*95, 200x95x95
    /(\d+)\s*–Ω–∞\s*(\d+)\s*–Ω–∞\s*(\d+)/g,   // 200 –Ω–∞ 95 –Ω–∞ 95
    /(\d+)\s+(\d+)\s+(\d+)/g,             // 200 95 95
    /(\d+)\s*[x√ó]\s*(\d+)\s*[x√ó]\s*(\d+)/g // 200 x 95 x 95
  ];
  
  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(query)) !== null) {
      const dims = [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];
      if (dims.every(d => d > 0 && d < 10000)) { // —Ä–∞–∑—É–º–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        dimensions.push(dims);
      }
    }
  });
  
  return dimensions;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function extractPriceRange(query) {
  const queryLower = query.toLowerCase();
  const priceRange = { minPrice: null, maxPrice: null };
  
  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É - –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "—Ä—É–±" –±–µ–∑ "BYN", –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º BYN
  const hasBYN = /byn|–±–µ–ª–æ—Ä—É—Å—Å–∫|–±–µ–ª\.—Ä—É–±/i.test(queryLower);
  const hasRUB = /—Ä—É–±|—Ä—É–±–ª/i.test(queryLower);
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω
  const patterns = [
    // "–¥–æ 1000", "–¥–æ 1000 —Ä—É–±–ª–µ–π", "–¥–µ—à–µ–≤–ª–µ 1000"
    /(?:–¥–æ|–¥–µ—à–µ–≤–ª–µ|–Ω–µ –¥–æ—Ä–æ–∂–µ|–º–∞–∫—Å–∏–º—É–º)\s*(\d+)/g,
    // "–æ—Ç 500", "–æ—Ç 500 —Ä—É–±–ª–µ–π", "–¥–æ—Ä–æ–∂–µ 500"
    /(?:–æ—Ç|–¥–æ—Ä–æ–∂–µ|–º–∏–Ω–∏–º—É–º)\s*(\d+)/g,
    // "–æ—Ç 500 –¥–æ 1500", "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 500-1500", "500-1500"
    /(?:–æ—Ç\s*(\d+)\s*–¥–æ\s*(\d+)|–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö\s*(\d+)-(\d+)|(\d+)-(\d+))/g,
    // "–≤ –±—é–¥–∂–µ—Ç–µ 1500-2000"
    /–≤ –±—é–¥–∂–µ—Ç–µ\s*(\d+)-(\d+)/g
  ];
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  patterns.forEach((pattern, index) => {
    let match;
    while ((match = pattern.exec(queryLower)) !== null) {
      if (index === 0) { // "–¥–æ X"
        priceRange.maxPrice = parseInt(match[1]);
      } else if (index === 1) { // "–æ—Ç X"
        priceRange.minPrice = parseInt(match[1]);
      } else if (index === 2) { // "–æ—Ç X –¥–æ Y"
        if (match[1] && match[2]) {
          priceRange.minPrice = parseInt(match[1]);
          priceRange.maxPrice = parseInt(match[2]);
        } else if (match[3] && match[4]) {
          priceRange.minPrice = parseInt(match[3]);
          priceRange.maxPrice = parseInt(match[4]);
        } else if (match[5] && match[6]) {
          priceRange.minPrice = parseInt(match[5]);
          priceRange.maxPrice = parseInt(match[6]);
        }
      } else if (index === 3) { // "–≤ –±—é–¥–∂–µ—Ç–µ X-Y"
        priceRange.minPrice = parseInt(match[1]);
        priceRange.maxPrice = parseInt(match[2]);
      }
    }
  });
  
  // –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (queryLower.includes('–¥–µ—à–µ–≤—ã–π') || queryLower.includes('–Ω–µ–¥–æ—Ä–æ–≥–æ–π') || queryLower.includes('–±—é–¥–∂–µ—Ç–Ω—ã–π')) {
    priceRange.maxPrice = 1000;
  }
  if (queryLower.includes('–¥–æ—Ä–æ–≥–æ–π') || queryLower.includes('–ø—Ä–µ–º–∏—É–º') || queryLower.includes('—ç–ª–∏—Ç–Ω—ã–π')) {
    priceRange.minPrice = 3000;
  }
  
  // –ù–û–í–û–ï: –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "—Ä—É–±", –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ BYN
  if (hasRUB && !hasBYN) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "—Ä—É–±" –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ BYN
    // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ - —Ü–µ–Ω—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    console.log('üí∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º BYN');
  }
  
  return priceRange;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
function extractSleepingPlace(query) {
  const queryLower = query.toLowerCase();
  const sleepingPlaces = [];
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  const patterns = [
    /—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\s*(\d+)\s*–Ω–∞\s*(\d+)/g,
    /—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\s*(\d+)\s*x\s*(\d+)/g,
    /—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ\s*(\d+)\s*√ó\s*(\d+)/g,
    /(\d+)\s*–Ω–∞\s*(\d+)\s*—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ/g,
    /(\d+)\s*x\s*(\d+)\s*—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ/g
  ];
  
  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(queryLower)) !== null) {
      const width = parseInt(match[1]);
      const length = parseInt(match[2]);
      if (width > 0 && length > 0 && width < 300 && length < 300) {
        sleepingPlaces.push([width, length]);
      }
    }
  });
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  if (queryLower.includes('–¥–ª—è —Å–Ω–∞ –¥–≤–æ–∏—Ö') || queryLower.includes('–¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è')) {
    sleepingPlaces.push([160, 200]); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –¥–≤–æ–∏—Ö
  }
  if (queryLower.includes('–æ–¥–Ω–æ—Å–ø–∞–ª—å–Ω–∞—è') || queryLower.includes('–¥–ª—è –æ–¥–Ω–æ–≥–æ')) {
    sleepingPlaces.push([90, 200]); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ
  }
  
  return sleepingPlaces;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
function detectRoom(query) {
  const queryLower = query.toLowerCase();
  
  const roomKeywords = {
    '–≥–æ—Å—Ç–∏–Ω–∞—è': ['–≥–æ—Å—Ç–∏–Ω–∞—è', '–∑–∞–ª', '–∑–∞–ª –¥–ª—è –≥–æ—Å—Ç–µ–π', '–≥–æ—Å—Ç–∏–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞'],
    '—Å–ø–∞–ª—å–Ω—è': ['—Å–ø–∞–ª—å–Ω—è', '—Å–ø–∞–ª—å–Ω–∞—è', '—Å–ø–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞', '–¥–ª—è —Å–Ω–∞'],
    '–∫—É—Ö–Ω—è': ['–∫—É—Ö–Ω—è', '–∫—É—Ö–æ–Ω–Ω–∞—è', '–∫—É—Ö–æ–Ω–Ω—ã–π', '–¥–ª—è –∫—É—Ö–Ω–∏'],
    '–¥–µ—Ç—Å–∫–∞—è': ['–¥–µ—Ç—Å–∫–∞—è', '–¥–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞', '–¥–ª—è –¥–µ—Ç–µ–π', '—Ä–µ–±–µ–Ω–æ–∫'],
    '–ø—Ä–∏—Ö–æ–∂–∞—è': ['–ø—Ä–∏—Ö–æ–∂–∞—è', '–∫–æ—Ä–∏–¥–æ—Ä', '–≤—Ö–æ–¥–Ω–∞—è', '–¥–ª—è –ø—Ä–∏—Ö–æ–∂–µ–π'],
    '–æ—Ñ–∏—Å': ['–æ—Ñ–∏—Å', '—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ', '–∫–∞–±–∏–Ω–µ—Ç', '–¥–ª—è —Ä–∞–±–æ—Ç—ã']
  };
  
  for (const [room, keywords] of Object.entries(roomKeywords)) {
    if (keywords.some(keyword => queryLower.includes(keyword))) {
      return room;
    }
  }
  
  return null;
}

// –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —Ü–≤–µ—Ç–æ–≤
function getColorSynonyms(color) {
  const colorLower = color.toLowerCase();
  
  const colorSynonyms = {
    '—Ç–µ–º–Ω—ã–π': ['—á–µ—Ä–Ω—ã–π', '–≥—Ä–∞—Ñ–∏—Ç', '–∞–Ω—Ç—Ä–∞—Ü–∏—Ç', '–≤–µ–Ω–≥–µ', '—Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π', '—É–≥–æ–ª—å–Ω—ã–π'],
    '—Å–≤–µ—Ç–ª—ã–π': ['–±–µ–ª—ã–π', '–∫—Ä–µ–º–æ–≤—ã–π', '–±–µ–∂–µ–≤—ã–π', '–º–æ–ª–æ—á–Ω—ã–π', '–∞–π–≤–æ—Ä–∏', '—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π', '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π'],
    '—è—Ä–∫–∏–π': ['–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∂–µ–ª—Ç—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Ä–æ–∑–æ–≤—ã–π'],
    '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π': ['—Å–µ—Ä—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–±–µ–∂–µ–≤—ã–π', '—Ç–∞—É–ø', '–≥—Ä–∞—Ñ–∏—Ç', '—Å—Ç–∞–ª—å']
  };
  
  for (const [category, synonyms] of Object.entries(colorSynonyms)) {
    if (synonyms.some(synonym => colorLower.includes(synonym))) {
      return synonyms;
    }
  }
  
  return [color];
}

// –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
function getMechanismSynonyms(mechanism) {
  const mechanismLower = mechanism.toLowerCase();
  
  if (mechanismLower.includes('—Ä–∞—Å–∫–ª–∞–¥–Ω–æ–π') || mechanismLower.includes('—Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞—é—â–∏–π—Å—è')) {
    return ['–µ–≤—Ä–æ–∫–Ω–∏–∂–∫–∞', '–∫–Ω–∏–∂–∫–∞', '–∞–∫–∫–æ—Ä–¥–µ–æ–Ω', '–≤—ã–∫–∞—Ç–Ω–æ–π', '–ø–∞–Ω—Ç–æ–≥—Ä–∞—Ñ', '–¥–µ–ª—å—Ñ–∏–Ω', '–∫–ª–∏–∫-–∫–ª—è–∫'];
  }
  
  if (mechanismLower.includes('–Ω–µ —Ä–∞—Å–∫–ª–∞–¥–Ω–æ–π') || mechanismLower.includes('—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π') || mechanismLower.includes('–±–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞')) {
    return ['–Ω–µ—Ç', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–º–µ—Ö–∞–Ω–∏–∑–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ä–∞—Å–∫–ª–∞–¥–∫–∏) - –Ω–µ—Ç'];
  }
  
  return [mechanism];
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –Ω–∞–≥—Ä—É–∑–∫–µ
function extractMaxLoad(query) {
  const queryLower = query.toLowerCase();
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
  const patterns = [
    /–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\s*(\d+)/g,
    /–Ω–∞–≥—Ä—É–∑–∫–∞\s*(\d+)/g,
    /–≤—ã–¥–µ—Ä–∂–∏—Ç\s*(\d+)/g,
    /–±–æ–ª—å—à–æ–π –≤–µ—Å\s*(\d+)/g
  ];
  
  for (const pattern of patterns) {
    const match = pattern.exec(queryLower);
    if (match) {
      return parseInt(match[1]);
    }
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  if (queryLower.includes('–±–æ–ª—å—à–æ–π –≤–µ—Å') || queryLower.includes('—Ç—è–∂–µ–ª—ã–π')) {
    return 150; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è "–±–æ–ª—å—à–æ–≥–æ –≤–µ—Å–∞"
  }
  
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –¥–æ–ø—É—Å–∫–æ–º
function checkDimensionMatch(offerDimensions, queryDimensions, tolerance = 10) {
  if (!offerDimensions || offerDimensions.length === 0) return false;
  if (!queryDimensions || queryDimensions.length === 0) return false;
  
  return queryDimensions.some(queryDims => {
    return offerDimensions.some(offerDims => {
      if (offerDims.length !== queryDims.length) return false;
      
      return offerDims.every((dim, i) => {
        const diff = Math.abs(dim - queryDims[i]);
        return diff <= tolerance;
      });
    });
  });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
function extractOfferDimensions(offer) {
  const dimensions = [];
  
  if (!offer.params) return dimensions;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
  const sizeParams = ['–†–∞–∑–º–µ—Ä—ã', '–ì–∞–±–∞—Ä–∏—Ç—ã –ì—Ö–î—Ö–í, —Å–º', '–†–∞–∑–º–µ—Ä', '–ì–∞–±–∞—Ä–∏—Ç—ã –∫—Ä–æ–≤–∞—Ç–∏'];
  
  sizeParams.forEach(paramName => {
    const value = offer.params[paramName];
    if (!value) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    const numbers = value.match(/\d+/g);
    if (numbers && numbers.length >= 2) {
      const dims = numbers.map(n => parseInt(n)).filter(n => n > 0 && n < 10000);
      if (dims.length >= 2) {
        dimensions.push(dims);
      }
    }
  });
  
  return dimensions;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
function filterOffers(catalog, query, filters = {}) {
  let filtered = [...catalog.offers];
  console.log(`üìä filterOffers START: –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${filtered.length}`);
  console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${query}"`);
  console.log(`üìã –§–∏–ª—å—Ç—Ä—ã:`, filters);
  
  // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const detectedCategory = detectCategory(query);
  if (detectedCategory) {
    console.log('‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', detectedCategory);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const allCategories = [...new Set(catalog.offers.map(o => o.category).filter(Boolean))];
    console.log('üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:', allCategories.slice(0, 10));
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const similarCategories = allCategories.filter(cat => 
      cat.toLowerCase().includes(detectedCategory) || 
      detectedCategory.includes(cat.toLowerCase())
    );
    console.log(`üîç –ü–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è "${detectedCategory}":`, similarCategories);
    
    filtered = filtered.filter(offer => 
      offer.category && offer.category.toLowerCase().includes(detectedCategory)
    );
    console.log(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${detectedCategory}": ${filtered.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  } else {
    console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (filters.category) {
    filtered = filtered.filter(offer => 
      offer.category && offer.category.toLowerCase().includes(filters.category.toLowerCase())
    );
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const queryDimensions = extractDimensions(query);
  const priceRange = extractPriceRange(query);
  const sleepingPlaces = extractSleepingPlace(query);
  const detectedRoom = detectRoom(query);
  const maxLoad = extractMaxLoad(query);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ priceRange
  console.log('üí∞ –ò–∑–≤–ª–µ—á–µ–Ω priceRange:', {
    minPrice: priceRange.minPrice,
    maxPrice: priceRange.maxPrice,
    query: query.substring(0, 100)
  });
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É (–∏–∑ filters)
  if (filters.minPrice !== undefined) {
    filtered = filtered.filter(offer => offer.price >= filters.minPrice);
  }
  if (filters.maxPrice !== undefined) {
    filtered = filtered.filter(offer => offer.price <= filters.maxPrice);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
  if (priceRange.minPrice !== null) {
    filtered = filtered.filter(offer => offer.price >= priceRange.minPrice);
  }
  if (priceRange.maxPrice !== null) {
    filtered = filtered.filter(offer => offer.price <= priceRange.maxPrice);
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const queryWords = query.toLowerCase()
    .split(/[\s,.-]+/)
    .filter(w => w.length > 2 || /^\d+$/.test(w)) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–∞
    .map(word => {
      // –î–ª—è —á–∏—Å–µ–ª –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º
      if (/^\d+$/.test(word)) {
        return word;
      }
      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –±–µ—Ä–µ–º –∫–æ—Ä–µ–Ω—å —Å–ª–æ–≤–∞
      if (word.length > 4) {
        return word.substring(0, word.length - 2); // "–ø–æ–¥–≤–µ—Å–Ω–æ–µ" -> "–ø–æ–¥–≤–µ—Å"
      }
      return word;
    });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const fullQueryWords = query.toLowerCase()
    .split(/[\s,.-]+/)
    .filter(w => w.length > 0);
  
  if (queryWords.length > 0 || queryDimensions.length > 0 || priceRange.minPrice || priceRange.maxPrice || sleepingPlaces.length > 0 || detectedRoom || maxLoad) {
    filtered = filtered.map(offer => {
      let relevanceScore = 0;
      const nameText = (offer.name || '').toLowerCase();
      const descText = (offer.description || '').toLowerCase();
      const paramsText = JSON.stringify(offer.params || {}).toLowerCase();
      
      // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      if (offer.params) {
        const fabricParams = ['–¢–∫–∞–Ω—å', '–û–±–∏–≤–∫–∞', '–ú–∞—Ç–µ—Ä–∏–∞–ª'];
        fabricParams.forEach(paramName => {
          const paramValue = (offer.params[paramName] || '').toLowerCase();
          if (paramValue && fullQueryWords.some(word => paramValue.includes(word))) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 10 –¥–æ 5
          }
        });
      }
      
      // 2. –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
      if (offer.params && offer.params['–¶–≤–µ—Ç']) {
        const offerColor = offer.params['–¶–≤–µ—Ç'].toLowerCase();
        fullQueryWords.forEach(word => {
          const colorSynonyms = getColorSynonyms(word);
          if (colorSynonyms.some(synonym => offerColor.includes(synonym.toLowerCase()))) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 8 –¥–æ 5
          }
        });
      }
      
      // 3. –ü–æ–∏—Å–∫ –ø–æ –º–µ—Ö–∞–Ω–∏–∑–º—É —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
      if (offer.params) {
        const mechanismParams = ['–ú–µ—Ö–∞–Ω–∏–∑–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–ú–µ—Ö–∞–Ω–∏–∑–º'];
        mechanismParams.forEach(paramName => {
          const paramValue = (offer.params[paramName] || '').toLowerCase();
          fullQueryWords.forEach(word => {
            const mechanismSynonyms = getMechanismSynonyms(word);
            if (mechanismSynonyms.some(synonym => paramValue.includes(synonym.toLowerCase()))) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 7 –¥–æ 5
            }
          });
        });
      }
      
      // 4. –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∞–ª—å–Ω–æ–º—É –º–µ—Å—Ç—É
      if (sleepingPlaces.length > 0 && offer.params && offer.params['–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —Å–º']) {
        const sleepingPlaceValue = offer.params['–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —Å–º'];
        const numbers = sleepingPlaceValue.match(/\d+/g);
        if (numbers && numbers.length >= 2) {
          const offerPlace = [parseInt(numbers[0]), parseInt(numbers[1])];
          sleepingPlaces.forEach(queryPlace => {
            if (Math.abs(offerPlace[0] - queryPlace[0]) <= 5 && Math.abs(offerPlace[1] - queryPlace[1]) <= 5) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
            }
          });
        }
      }
      
      // 5. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (offer.params && offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']) {
        const configValue = offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'].toLowerCase();
        fullQueryWords.forEach(word => {
          if (word.includes('—É–≥–ª–æ–≤–æ–π') && configValue.includes('—É–≥–ª–æ–≤–æ–π')) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
          } else if (word.includes('–ø—Ä—è–º–æ–π') && configValue.includes('–ø—Ä—è–º–æ–π')) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
          } else if (word.includes('–º–æ–¥—É–ª—å–Ω—ã–π') && configValue.includes('–º–æ–¥—É–ª—å')) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
          }
        });
      }
      
      // 6. –ü–æ–∏—Å–∫ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º (+5 –±–∞–ª–ª–æ–≤)
      if (offer.params) {
        const functionParams = {
          '—è—â–∏–∫': '–Ø—â–∏–∫ –¥–ª—è –±–µ–ª—å—è',
          '–ø–æ–¥—ä–µ–º–Ω—ã–π': '–ü–æ–¥—ä–µ–º–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º',
          '–æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–æ–µ': '–û—Ä—Ç–æ–ø–µ–¥—á–µ—Å–∫–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ'
        };
        
        Object.entries(functionParams).forEach(([keyword, paramName]) => {
          if (fullQueryWords.some(word => word.includes(keyword)) && offer.params[paramName]) {
            relevanceScore += 5;
          }
        });
      }
      
      // 7. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é/–∫–æ–º–Ω–∞—Ç–µ (+5 –±–∞–ª–ª–æ–≤)
      if (detectedRoom) {
        const roomCategories = {
          '–≥–æ—Å—Ç–∏–Ω–∞—è': ['–¥–∏–≤–∞–Ω', '—Å—Ç–æ–ª', '–∫—Ä–µ—Å–ª–æ', '—Ç—É–º–±–∞'],
          '—Å–ø–∞–ª—å–Ω—è': ['–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '–∫–æ–º–æ–¥', '—Ç—É–º–±–∞'],
          '–∫—É—Ö–Ω—è': ['–∫—É—Ö–Ω—è', '—Å—Ç–æ–ª', '—Å—Ç—É–ª'],
          '–¥–µ—Ç—Å–∫–∞—è': ['–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '—Å—Ç–æ–ª'],
          '–ø—Ä–∏—Ö–æ–∂–∞—è': ['–ø—Ä–∏—Ö–æ–∂–∞—è', '–≤–µ—à–∞–ª–∫–∞', '—Ç—É–º–±–∞']
        };
        
        const expectedCategories = roomCategories[detectedRoom] || [];
        if (expectedCategories.some(cat => offer.category && offer.category.toLowerCase().includes(cat))) {
          relevanceScore += 5;
        }
      }
      
      // 8. –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º (+5 –±–∞–ª–ª–æ–≤)
      if (queryDimensions.length > 0) {
        const offerDimensions = extractOfferDimensions(offer);
        if (checkDimensionMatch(offerDimensions, queryDimensions)) {
          relevanceScore += 5;
        }
      }
      
      // 9. –ü–æ–∏—Å–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π (+4 –±–∞–ª–ª–∞)
      if (offer.oldPrice && offer.oldPrice > offer.price) {
        if (fullQueryWords.some(word => ['—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '—É—Ü–µ–Ω–∫–∞'].includes(word))) {
          relevanceScore += 4;
        }
      }
      
      // 10. –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∫–∞—Ä–∫–∞—Å–∞ (+4 –±–∞–ª–ª–∞)
      if (offer.params && offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞—Ä–∫–∞—Å–∞']) {
        const frameMaterial = offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞—Ä–∫–∞—Å–∞'].toLowerCase();
        fullQueryWords.forEach(word => {
          if (word.includes('–¥–µ—Ä–µ–≤–æ') && (frameMaterial.includes('–±—Ä—É—Å') || frameMaterial.includes('—Ñ–∞–Ω–µ—Ä–∞') || frameMaterial.includes('–º–∞—Å—Å–∏–≤'))) {
            relevanceScore += 4;
          } else if (word.includes('–º–µ—Ç–∞–ª–ª') && (frameMaterial.includes('–º–µ—Ç–∞–ª–ª') || frameMaterial.includes('—Å—Ç–∞–ª—å'))) {
            relevanceScore += 4;
          }
        });
      }
      
      // 11. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ (+4 –±–∞–ª–ª–∞)
      if (maxLoad && offer.params && offer.params['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞']) {
        const offerLoad = parseInt(offer.params['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞']);
        if (offerLoad >= maxLoad) {
          relevanceScore += 4;
        }
      }
      
      // 12. –ü–æ–∏—Å–∫ –ø–æ –∂–µ—Å—Ç–∫–æ—Å—Ç–∏ (+4 –±–∞–ª–ª–∞)
      if (offer.params && offer.params['–£—Ä–æ–≤–µ–Ω—å –∂–µ—Å—Ç–∫–æ—Å—Ç–∏']) {
        const stiffness = offer.params['–£—Ä–æ–≤–µ–Ω—å –∂–µ—Å—Ç–∫–æ—Å—Ç–∏'].toLowerCase();
        fullQueryWords.forEach(word => {
          if (word.includes('–∂–µ—Å—Ç–∫–∏–π') && stiffness.includes('–∂–µ—Å—Ç–∫–∏–π')) {
            relevanceScore += 4;
          } else if (word.includes('–º—è–≥–∫–∏–π') && stiffness.includes('–º—è–≥–∫–∏–π')) {
            relevanceScore += 4;
          }
        });
      }
      
      // 13. –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      queryWords.forEach(word => {
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ = 5 –±–∞–ª–ª–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        if (nameText.includes(word)) {
          relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 3 –¥–æ 5
        }
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö = 2 –±–∞–ª–ª–∞
        if (paramsText.includes(word)) {
          relevanceScore += 2;
        }
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ = 1 –±–∞–ª–ª
        if (descText.includes(word)) {
          relevanceScore += 1;
        }
      });
      
      // 14. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω—ã–º —Å–ª–æ–≤–∞–º - —É–±–∏—Ä–∞–µ–º (–∏–∑–±—ã—Ç–æ—á–Ω–æ)
      
      // 15. –ù–û–í–û–ï: –ë–∞–ª–ª—ã –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
      if (priceRange.maxPrice) {
        const pricePerUnit = getPricePerUnit(offer);
        const totalPrice = pricePerUnit * requestedQuantity;
        
        if (totalPrice <= priceRange.maxPrice) {
          relevanceScore += 5; // +5 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
          console.log(`üí∞ ${offer.name}: –≤ –±—é–¥–∂–µ—Ç–µ (${totalPrice} <= ${priceRange.maxPrice})`);
        }
      }
      
      return { ...offer, relevanceScore };
    }).filter(offer => offer.relevanceScore > 0)
      .sort((a, b) => b.relevanceScore - a.relevanceScore);
  }
  
  // Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ - –∏—â–µ–º –±–µ–∑ —Ü–µ–Ω—ã
  if (filtered.length === 0 && detectedCategory && (priceRange.minPrice || priceRange.maxPrice)) {
    console.log('‚ö†Ô∏è Fallback –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ');
    
    filtered = catalog.offers
      .filter(offer => offer.category && offer.category.toLowerCase().includes(detectedCategory))
      .sort((a, b) => a.price - b.price) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
      .slice(0, 20); // –ë–µ—Ä—ë–º —Ç–æ–ø-20 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö
  }
  
  // Fallback: –µ—Å–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
  if (filtered.length === 0 && detectedCategory) {
    console.log('Fallback –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º');
    const allOffers = [...catalog.offers];
    if (queryWords.length > 0 || queryDimensions.length > 0 || priceRange.minPrice || priceRange.maxPrice || sleepingPlaces.length > 0 || detectedRoom || maxLoad) {
      filtered = allOffers.map(offer => {
        let relevanceScore = 0;
        const nameText = (offer.name || '').toLowerCase();
        const descText = (offer.description || '').toLowerCase();
        const paramsText = JSON.stringify(offer.params || {}).toLowerCase();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —á—Ç–æ –∏ –≤—ã—à–µ
        // (–∫–æ–ø–∏—Ä—É–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        
        // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        if (offer.params) {
          const fabricParams = ['–¢–∫–∞–Ω—å', '–û–±–∏–≤–∫–∞', '–ú–∞—Ç–µ—Ä–∏–∞–ª'];
          fabricParams.forEach(paramName => {
            const paramValue = (offer.params[paramName] || '').toLowerCase();
            if (paramValue && fullQueryWords.some(word => paramValue.includes(word))) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 10 –¥–æ 5
            }
          });
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        if (offer.params && offer.params['–¶–≤–µ—Ç']) {
          const offerColor = offer.params['–¶–≤–µ—Ç'].toLowerCase();
          fullQueryWords.forEach(word => {
            const colorSynonyms = getColorSynonyms(word);
            if (colorSynonyms.some(synonym => offerColor.includes(synonym.toLowerCase()))) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 8 –¥–æ 5
            }
          });
        }
        
        // 3. –ü–æ–∏—Å–∫ –ø–æ –º–µ—Ö–∞–Ω–∏–∑–º—É —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        if (offer.params) {
          const mechanismParams = ['–ú–µ—Ö–∞–Ω–∏–∑–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–ú–µ—Ö–∞–Ω–∏–∑–º'];
          mechanismParams.forEach(paramName => {
            const paramValue = (offer.params[paramName] || '').toLowerCase();
            fullQueryWords.forEach(word => {
              const mechanismSynonyms = getMechanismSynonyms(word);
              if (mechanismSynonyms.some(synonym => paramValue.includes(synonym.toLowerCase()))) {
                relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 7 –¥–æ 5
              }
            });
          });
        }
        
        // 4. –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∞–ª—å–Ω–æ–º—É –º–µ—Å—Ç—É
        if (sleepingPlaces.length > 0 && offer.params && offer.params['–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —Å–º']) {
          const sleepingPlaceValue = offer.params['–°–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —Å–º'];
          const numbers = sleepingPlaceValue.match(/\d+/g);
          if (numbers && numbers.length >= 2) {
            const offerPlace = [parseInt(numbers[0]), parseInt(numbers[1])];
            sleepingPlaces.forEach(queryPlace => {
              if (Math.abs(offerPlace[0] - queryPlace[0]) <= 5 && Math.abs(offerPlace[1] - queryPlace[1]) <= 5) {
                relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
              }
            });
          }
        }
        
        // 5. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (offer.params && offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']) {
          const configValue = offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'].toLowerCase();
          fullQueryWords.forEach(word => {
            if (word.includes('—É–≥–ª–æ–≤–æ–π') && configValue.includes('—É–≥–ª–æ–≤–æ–π')) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
            } else if (word.includes('–ø—Ä—è–º–æ–π') && configValue.includes('–ø—Ä—è–º–æ–π')) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
            } else if (word.includes('–º–æ–¥—É–ª—å–Ω—ã–π') && configValue.includes('–º–æ–¥—É–ª—å')) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 6 –¥–æ 5
            }
          });
        }
        
        // 6. –ü–æ–∏—Å–∫ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
        if (offer.params) {
          const functionParams = {
            '—è—â–∏–∫': '–Ø—â–∏–∫ –¥–ª—è –±–µ–ª—å—è',
            '–ø–æ–¥—ä–µ–º–Ω—ã–π': '–ü–æ–¥—ä–µ–º–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º',
            '–æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–æ–µ': '–û—Ä—Ç–æ–ø–µ–¥—á–µ—Å–∫–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ'
          };
          
          Object.entries(functionParams).forEach(([keyword, paramName]) => {
            if (fullQueryWords.some(word => word.includes(keyword)) && offer.params[paramName]) {
              relevanceScore += 5;
            }
          });
        }
        
        // 7. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é/–∫–æ–º–Ω–∞—Ç–µ
        if (detectedRoom) {
          const roomCategories = {
            '–≥–æ—Å—Ç–∏–Ω–∞—è': ['–¥–∏–≤–∞–Ω', '—Å—Ç–æ–ª', '–∫—Ä–µ—Å–ª–æ', '—Ç—É–º–±–∞'],
            '—Å–ø–∞–ª—å–Ω—è': ['–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '–∫–æ–º–æ–¥', '—Ç—É–º–±–∞'],
            '–∫—É—Ö–Ω—è': ['–∫—É—Ö–Ω—è', '—Å—Ç–æ–ª', '—Å—Ç—É–ª'],
            '–¥–µ—Ç—Å–∫–∞—è': ['–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '—Å—Ç–æ–ª'],
            '–ø—Ä–∏—Ö–æ–∂–∞—è': ['–ø—Ä–∏—Ö–æ–∂–∞—è', '–≤–µ—à–∞–ª–∫–∞', '—Ç—É–º–±–∞']
          };
          
          const expectedCategories = roomCategories[detectedRoom] || [];
          if (expectedCategories.some(cat => offer.category && offer.category.toLowerCase().includes(cat))) {
            relevanceScore += 5;
          }
        }
        
        // 8. –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        if (queryDimensions.length > 0) {
          const offerDimensions = extractOfferDimensions(offer);
          if (checkDimensionMatch(offerDimensions, queryDimensions)) {
            relevanceScore += 5;
          }
        }
        
      // 9. –ü–æ–∏—Å–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π
      if (offer.oldPrice && offer.oldPrice > offer.price) {
        if (fullQueryWords.some(word => ['—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '—É—Ü–µ–Ω–∫–∞'].includes(word))) {
          relevanceScore += 3; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 3 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        }
      }
        
        // 10. –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∫–∞—Ä–∫–∞—Å–∞
        if (offer.params && offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞—Ä–∫–∞—Å–∞']) {
          const frameMaterial = offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞—Ä–∫–∞—Å–∞'].toLowerCase();
          fullQueryWords.forEach(word => {
            if (word.includes('–¥–µ—Ä–µ–≤–æ') && (frameMaterial.includes('–±—Ä—É—Å') || frameMaterial.includes('—Ñ–∞–Ω–µ—Ä–∞') || frameMaterial.includes('–º–∞—Å—Å–∏–≤'))) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 5
            } else if (word.includes('–º–µ—Ç–∞–ª–ª') && (frameMaterial.includes('–º–µ—Ç–∞–ª–ª') || frameMaterial.includes('—Å—Ç–∞–ª—å'))) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 5
            }
          });
        }
        
        // 11. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ
        if (maxLoad && offer.params && offer.params['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞']) {
          const offerLoad = parseInt(offer.params['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞']);
          if (offerLoad >= maxLoad) {
            relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 5
          }
        }
        
        // 12. –ü–æ–∏—Å–∫ –ø–æ –∂–µ—Å—Ç–∫–æ—Å—Ç–∏
        if (offer.params && offer.params['–£—Ä–æ–≤–µ–Ω—å –∂–µ—Å—Ç–∫–æ—Å—Ç–∏']) {
          const stiffness = offer.params['–£—Ä–æ–≤–µ–Ω—å –∂–µ—Å—Ç–∫–æ—Å—Ç–∏'].toLowerCase();
          fullQueryWords.forEach(word => {
            if (word.includes('–∂–µ—Å—Ç–∫–∏–π') && stiffness.includes('–∂–µ—Å—Ç–∫–∏–π')) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 5
            } else if (word.includes('–º—è–≥–∫–∏–π') && stiffness.includes('–º—è–≥–∫–∏–π')) {
              relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 4 –¥–æ 5
            }
          });
        }
        
        // 13. –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        queryWords.forEach(word => {
          if (nameText.includes(word)) relevanceScore += 5; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å 3 –¥–æ 5
          if (paramsText.includes(word)) relevanceScore += 2;
          if (descText.includes(word)) relevanceScore += 1;
        });
        
        // 14. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω—ã–º —Å–ª–æ–≤–∞–º - —É–±–∏—Ä–∞–µ–º (–∏–∑–±—ã—Ç–æ—á–Ω–æ)
        
        // 15. –ù–û–í–û–ï: –ë–∞–ª–ª—ã –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
        if (priceRange.maxPrice) {
          const pricePerUnit = getPricePerUnit(offer);
          const totalPrice = pricePerUnit * requestedQuantity;
          
          if (totalPrice <= priceRange.maxPrice) {
            relevanceScore += 5; // +5 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
            console.log(`üí∞ ${offer.name}: –≤ –±—é–¥–∂–µ—Ç–µ (${totalPrice} <= ${priceRange.maxPrice})`);
          }
        }
        
        return { ...offer, relevanceScore };
      }).filter(offer => offer.relevanceScore >= 5)
        .sort((a, b) => b.relevanceScore - a.relevanceScore)
        .slice(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–æ–ø-50 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
        
  console.log(`üéØ –ü–æ—Å–ª–µ relevanceScore —Ñ–∏–ª—å—Ç—Ä–∞: ${filtered.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  if (filtered.length > 0) {
    console.log('üìä –¢–æ–ø-5 –ø–æ relevanceScore:', filtered.slice(0, 5).map(o => ({
      name: o.name,
      price: o.price,
      relevanceScore: o.relevanceScore
    })));
  }
    }
  }
  
  // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ—Ç–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
  const priceIntent = detectPriceIntent(query);
  const requestedQuantity = extractQuantity(query);
  
  console.log(`üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: ${priceIntent}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${requestedQuantity}`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
  filtered = filtered.map(offer => {
    const pricePerUnit = getPricePerUnit(offer);
    return {
      ...offer,
      pricePerUnit,
      totalPrice: pricePerUnit * requestedQuantity
    };
  });
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É —É–±—Ä–∞–Ω - —Ü–µ–Ω–∞ —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ relevanceScore (+5 –±–∞–ª–ª–æ–≤)
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
  if (priceIntent === 'cheapest') {
    // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    filtered.sort((a, b) => a.pricePerUnit - b.pricePerUnit);
    const finalResults = filtered.slice(0, 1); // –¢–æ–ª—å–∫–æ 1 —Ç–æ–≤–∞—Ä
    console.log(`üìä filterOffers RESULT (cheapest): –Ω–∞–π–¥–µ–Ω 1 —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä`);
    return finalResults;
  } else {
    // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ relevanceScore (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
    filtered.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞—è —Ü–≤–µ—Ç, –º–µ—Ö–∞–Ω–∏–∑–º –∏ —Ç.–¥.)
    const results = [];
    if (filtered.length >= 5) {
      // –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
      results.push(...filtered.slice(0, 5));
      console.log(`üìä filterOffers RESULT (variety): –≤—ã–±—Ä–∞–Ω–æ 5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
    } else if (filtered.length >= 3) {
      // –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
      results.push(...filtered.slice(0, 3));
      console.log(`üìä filterOffers RESULT (variety): –≤—ã–±—Ä–∞–Ω–æ 3 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞`);
    } else {
      results.push(...filtered); // –ï—Å–ª–∏ < 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
      console.log(`üìä filterOffers RESULT (variety): –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ ${filtered.length} —Ç–æ–≤–∞—Ä–∞`);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:', results.map(o => ({
      name: o.name,
      price: o.price,
      pricePerUnit: o.pricePerUnit,
      totalPrice: o.totalPrice,
      category: o.category,
      relevanceScore: o.relevanceScore
    })));
    
    console.log(`üìä filterOffers END: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ${results.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${filtered.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
    return results;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è GPT
function formatOffersForGPT(offers, maxPrice = null) {
  return offers.map(offer => {
    let info = `- ${offer.name} ‚Äî ${offer.price} ${offer.currency}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç
    if (offer.pricePerUnit && offer.pricePerUnit !== offer.price) {
      info += ` (${offer.pricePerUnit.toFixed(0)} ${offer.currency} –∑–∞ —à—Ç)`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞
    if (offer.aboveBudget && offer.totalPrice && maxPrice) {
      const excess = offer.totalPrice - maxPrice;
      info += ` (–Ω–∞ ${excess.toFixed(0)} ${offer.currency} –≤—ã—à–µ –±—é–¥–∂–µ—Ç–∞)`;
    }
    
    if (offer.oldPrice && offer.oldPrice > offer.price) {
      info += ` (–±—ã–ª–æ: ${offer.oldPrice} ${offer.currency})`;
    }
    
    if (offer.description) {
      info += ` | ${offer.description}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const importantParams = [];
    if (offer.params) {
      // –¢–∫–∞–Ω—å/–æ–±–∏–≤–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (offer.params['–¢–∫–∞–Ω—å']) {
        importantParams.push(`–¢–∫–∞–Ω—å: ${offer.params['–¢–∫–∞–Ω—å']}`);
      }
      if (offer.params['–û–±–∏–≤–∫–∞']) {
        importantParams.push(`–û–±–∏–≤–∫–∞: ${offer.params['–û–±–∏–≤–∫–∞']}`);
      }
      
      // –†–∞–∑–º–µ—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (offer.params['–†–∞–∑–º–µ—Ä—ã']) {
        importantParams.push(`–†–∞–∑–º–µ—Ä—ã: ${offer.params['–†–∞–∑–º–µ—Ä—ã']}`);
      }
      if (offer.params['–ì–∞–±–∞—Ä–∏—Ç—ã –ì—Ö–î—Ö–í, —Å–º']) {
        importantParams.push(`–ì–∞–±–∞—Ä–∏—Ç—ã: ${offer.params['–ì–∞–±–∞—Ä–∏—Ç—ã –ì—Ö–î—Ö–í, —Å–º']}`);
      }
      if (offer.params['–†–∞–∑–º–µ—Ä']) {
        importantParams.push(`–†–∞–∑–º–µ—Ä: ${offer.params['–†–∞–∑–º–µ—Ä']}`);
      }
      if (offer.params['–ì–∞–±–∞—Ä–∏—Ç—ã –∫—Ä–æ–≤–∞—Ç–∏']) {
        importantParams.push(`–†–∞–∑–º–µ—Ä –∫—Ä–æ–≤–∞—Ç–∏: ${offer.params['–ì–∞–±–∞—Ä–∏—Ç—ã –∫—Ä–æ–≤–∞—Ç–∏']}`);
      }
      
      // –ú–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (offer.params['–ú–µ—Ö–∞–Ω–∏–∑–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏']) {
        importantParams.push(`–ú–µ—Ö–∞–Ω–∏–∑–º: ${offer.params['–ú–µ—Ö–∞–Ω–∏–∑–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏']}`);
      }
      if (offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']) {
        importantParams.push(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${offer.params['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']}`);
      }
      
      // –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª']) {
        importantParams.push(`–ú–∞—Ç–µ—Ä–∏–∞–ª: ${offer.params['–ú–∞—Ç–µ—Ä–∏–∞–ª']}`);
      }
      if (offer.params['–í—ã—Å–æ—Ç–∞ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª–∞']) {
        importantParams.push(`–í—ã—Å–æ—Ç–∞: ${offer.params['–í—ã—Å–æ—Ç–∞ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç –ø–æ–ª–∞']}`);
      }
    }
    
    if (importantParams.length > 0) {
      info += ` | ${importantParams.join(', ')}`;
    }
    
    if (offer.url) {
      info += ` (${offer.url})`;
    }
    
    return info;
  }).join('\n');
}

// API handler
async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  try {
    const { action, query, filters } = req.body || {};
    
    if (action === 'search') {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
      const catalog = await getCatalog();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
      const filteredOffers = filterOffers(catalog, query || '', filters || {});
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º priceRange –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const priceRange = extractPriceRange(query || '');
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è GPT
      const formattedOffers = formatOffersForGPT(filteredOffers, priceRange.maxPrice);
      
      return res.status(200).json({
        success: true,
        totalFound: filteredOffers.length,
        offers: filteredOffers,
        formattedForGPT: formattedOffers,
        catalogInfo: {
          totalOffers: catalog.totalCount,
          categories: Object.values(catalog.categories),
          lastUpdate: catalog.timestamp
        }
      });
    }
    
    if (action === 'stats') {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
      const catalog = await getCatalog();
      const metadata = await redis.get(CATALOG_METADATA_KEY);
      
      return res.status(200).json({
        success: true,
        totalOffers: catalog.totalCount,
        categories: catalog.categories,
        lastUpdate: catalog.timestamp,
        cacheInfo: {
          lastFetchTime: metadata?.timestamp ? new Date(metadata.timestamp).toISOString() : null,
          lastUpdateHour: metadata?.lastUpdate ? new Date(metadata.lastUpdate).getHours() : null
        }
      });
    }
    
    return res.status(400).json({ error: 'Invalid action. Use "search" or "stats"' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ catalog.js:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
}

module.exports = handler;

