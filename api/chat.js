// Simple in-memory cache for sessions with size limit
const sessionCache = new Map();
const MAX_SESSION_CACHE_SIZE = 100; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞

// Circuit Breaker –¥–ª—è OpenAI API
const circuitBreaker = {
  failures: 0,
  lastFailureTime: null,
  threshold: 3, // –ü–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "open" —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –≤ "open" —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)
  state: 'closed' // closed, open, half-open
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker
function isCircuitOpen() {
  if (circuitBreaker.state === 'open') {
    if (Date.now() - circuitBreaker.lastFailureTime > circuitBreaker.timeout) {
      circuitBreaker.state = 'half-open';
      circuitBreaker.failures = 0;
      console.log('Circuit breaker: –ø–µ—Ä–µ—Ö–æ–¥ –≤ half-open —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    }
    return circuitBreaker.state === 'open';
  }
  return false;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –∫—ç—à–∞
function cleanupSessionCache() {
  if (sessionCache.size > MAX_SESSION_CACHE_SIZE) {
    const entries = Array.from(sessionCache.entries());
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    entries.sort((a, b) => {
      const timeA = new Date(a[1].lastUpdated || a[1].createdAt || 0).getTime();
      const timeB = new Date(b[1].lastUpdated || b[1].createdAt || 0).getTime();
      return timeA - timeB;
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    const toDelete = entries.slice(0, sessionCache.size - MAX_SESSION_CACHE_SIZE);
    toDelete.forEach(([key]) => sessionCache.delete(key));
    console.log(`–û—á–∏—â–µ–Ω–æ ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –∫—ç—à–∞`);
  }
}

// Catalog module removed - no longer needed

// Import rate limiter
const { checkRateLimit } = require('../utils/rate-limiter');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Redis –∫–ª–∏–µ–Ω—Ç —á—Ç–æ –∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
const { Redis } = require('@upstash/redis');
const redis = new Redis({
  url: process.env.KV_REST_API_URL,
  token: process.env.KV_REST_API_TOKEN,
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ Redis
async function saveChat(sessionId, userMessage, botReply) {
  try {
    const chatKey = `chat:${sessionId}`;
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    let session = await redis.get(chatKey);
    if (!session) {
      session = {
        sessionId,
        createdAt: new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        messages: []
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    session.messages.push({
      role: 'user',
      content: userMessage,
      timestamp: new Date().toISOString()
    });
    
    session.messages.push({
      role: 'assistant',
      content: botReply,
      timestamp: new Date().toISOString()
    });
    
    session.lastUpdated = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    await redis.set(chatKey, session);
    console.log('–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
    console.log('–ö–ª—é—á –≤ Redis:', chatKey);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', JSON.stringify(session, null, 2));
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ Redis:', error);
    return false;
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
async function analyzeUserMessage(userMessage) {
  const analysisPrompt = `–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–±–µ–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ nm-shop.by.

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).

–ó–ê–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê: ${JSON.stringify(userMessage)}

–ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö (–¥–∏–≤–∞–Ω, —Å—Ç—É–ª, –∫—Ä–æ–≤–∞—Ç—å, –∫—É—Ö–Ω—è) ‚Üí isProductQuestion: true
2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–∞–ª–æ–Ω–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ, –æ–ø–ª–∞—Ç–µ, –≥–∞—Ä–∞–Ω—Ç–∏–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö ‚Üí isProductQuestion: false
3. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤–æ–ø—Ä–æ—Å–∞:
   - "–¥–∏–≤–∞–Ω", "—Å–æ—Ñ–∞", "—É–≥–ª–æ–≤–æ–π –¥–∏–≤–∞–Ω" ‚Üí detectedCategory: "–î–∏–≤–∞–Ω"
   - "–∫—Ä–æ–≤–∞—Ç—å", "—Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ", "–º–∞—Ç—Ä–∞—Å" ‚Üí detectedCategory: "–ö—Ä–æ–≤–∞—Ç—å"
   - "–∫—É—Ö–Ω—è", "–∫—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä", "–∫—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å" ‚Üí detectedCategory: "–ö—É—Ö–Ω—è"
   - "—Å—Ç–æ–ª", "—Å—Ç—É–ª", "—à–∫–∞—Ñ", "–ø—Ä–∏—Ö–æ–∂–∞—è" ‚Üí detectedCategory: "–î—Ä—É–≥–æ–µ"
   - –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí detectedCategory: null

–ü–†–ò–ú–ï–†–´:

–ó–∞–ø—Ä–æ—Å: "–Ω—É–∂–µ–Ω —Å—Ç—É–ª –¥–æ 300 —Ä—É–±"
–û—Ç–≤–µ—Ç: {"isProductQuestion": true, "detectedCategory": "–î—Ä—É–≥–æ–µ"}

–ó–∞–ø—Ä–æ—Å: "–∫–∞–∫–∏–µ —É –≤–∞—Å –¥–∏–≤–∞–Ω—ã?"
–û—Ç–≤–µ—Ç: {"isProductQuestion": true, "detectedCategory": "–î–∏–≤–∞–Ω"}

–ó–∞–ø—Ä–æ—Å: "–≥–¥–µ –º–æ–∂–Ω–æ –¥–∏–≤–∞–Ω—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–∏–Ω—Å–∫–µ"
–û—Ç–≤–µ—Ç: {"isProductQuestion": false, "detectedCategory": null}

–ó–∞–ø—Ä–æ—Å: "–∫–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
–û—Ç–≤–µ—Ç: {"isProductQuestion": false, "detectedCategory": null}

–ó–∞–ø—Ä–æ—Å: "–ø–æ–¥–±–µ—Ä–∏—Ç–µ –∫—Ä–æ–≤–∞—Ç—å —Å –ø–æ–¥—ä–µ–º–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"
–û—Ç–≤–µ—Ç: {"isProductQuestion": true, "detectedCategory": "–ö—Ä–æ–≤–∞—Ç—å"}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ:
{"isProductQuestion": true/false, "detectedCategory": "–î–∏–≤–∞–Ω"/"–ö—Ä–æ–≤–∞—Ç—å"/"–ö—É—Ö–Ω—è"/"–î—Ä—É–≥–æ–µ"/null}`;

  console.log('üîç Message Analysis: –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–∞:', analysisPrompt.length, '—Å–∏–º–≤–æ–ª–æ–≤');
  
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{ role: 'system', content: analysisPrompt }],
        max_tokens: 100,
        temperature: 0.1
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Message Analysis: OpenAI error', response.status);
      console.error('Message Analysis: Error details:', errorText);
      // Fallback: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ FAQ –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      return { isProductQuestion: false, detectedCategory: null };
    }

    const data = await response.json();
    const resultText = data.choices?.[0]?.message?.content || '{}';
    
    console.log('üîç Message Analysis extracted content:', resultText);
    
    // –ü–∞—Ä—Å–∏–º JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try {
      const result = JSON.parse(resultText);
      console.log('üîç Message Analysis parsed:', result);
      return result;
    } catch (parseError) {
      console.error('‚ùå Message Analysis: JSON parse error', resultText);
      return { isProductQuestion: false, detectedCategory: null };
    }
  } catch (error) {
    console.error('Message Analysis: request error', error);
    // Fallback: –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ FAQ –≤–æ–ø—Ä–æ—Å
    return { isProductQuestion: false, detectedCategory: null };
  }
}

async function handler(req, res){
  // Add CORS headers for external domains
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') return res.status(405).end();
  
  try{
    const { action, session_id, user_message, history_tail, prompt, catalog, locale, aggressive_mode, user_messages_after_last_form } = req.body || {};
    
    // Rate limiting –¥–ª—è chat endpoint (–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è session_id)
    const rateLimitResult = await checkRateLimit(req);
    if (!rateLimitResult.allowed) {
      return res.status(429).json({
        error: 'Too Many Requests',
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        retryAfter: Math.ceil(rateLimitResult.resetTime / 1000)
      });
    }
    
    // Handle session initialization (first request with prompt/catalog)
    if (action === 'init' && prompt && catalog) {
      console.log(`[${new Date().toISOString()}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏:`, session_id);
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
      cleanupSessionCache();
      
      sessionCache.set(session_id, { 
        prompt, 
        catalog, 
        locale: locale || 'ru',
        createdAt: new Date().toISOString(),
        lastUpdated: new Date().toISOString()
      });
      
      console.log(`[${new Date().toISOString()}] –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${sessionCache.size}`);
      
      return res.status(200).json({ status: 'initialized' });
    }
    
    // Handle chat requests
    if (action === 'chat' && session_id && user_message) {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:', session_id);
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user_message);
      
      const session = sessionCache.get(session_id);
      if (!session) {
        console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ:', session_id);
        return res.status(400).json({ error: 'Session not initialized. Please reload the page.' });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      session.lastUpdated = new Date().toISOString();
      sessionCache.set(session_id, session);
      
      console.log('–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', !!session);
      
      // Build messages from history_tail + current message
      const messages = [
        ...(history_tail || []),
        { role: 'user', content: user_message }
      ];
      
      // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let messageAnalysis;
      try {
        messageAnalysis = await analyzeUserMessage(user_message);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        // Fallback - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ FAQ –≤–æ–ø—Ä–æ—Å
        messageAnalysis = { isProductQuestion: false, detectedCategory: null };
      }
      
      console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageAnalysis);
      
      // –°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      const sys = buildSystemPrompt(session.prompt, session.locale, aggressive_mode);
      console.log('–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞:', sys.length);
      
      // Dev fallback: if no API key, return a mock reply so the widget works locally
      if (!process.env.OPENAI_API_KEY){
        console.log('–ù–µ—Ç API –∫–ª—é—á–∞ OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç');
        const lastUser = (Array.isArray(messages)?messages:[]).filter(m=>m.role==='user').slice(-1)[0]?.content || '';
        const mock = lastUser
          ? `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: ¬´${lastUser.slice(0, 140)}¬ª. –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –¥–∏–≤–∞–Ω–∞–º. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –¥–∏–≤–∞–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`
          : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –¥–∏–≤–∞–Ω–∞–º. –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–∏–≤–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞. –ö–∞–∫–æ–π –¥–∏–≤–∞–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
        return res.status(200).json({ reply: mock });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Circuit Breaker
      if (isCircuitOpen()) {
        console.log('Circuit breaker: OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        const fallbackText = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º, –∞ —è –∑–∞–∫—Ä–µ–ø–ª—é –∑–∞ –≤–∞–º–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ';
        return res.status(200).json({ reply: fallbackText, needsForm: true, formType: 'gift', circuitBreaker: true });
      }
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
      const model = 'gpt-5-mini';
      const body = {
        model,
        messages: [{ role:'system', content: sys }, ...(Array.isArray(messages)?messages:[])].slice(-24)
      };
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è retry –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      async function fetchWithRetry(url, options, maxRetries = 3) {
        for (let i = 0; i < maxRetries; i++) {
          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 25000); // 25 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            
            const response = await fetch(url, {
              ...options,
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            return response;
          } catch (error) {
            console.log(`OpenAI retry ${i + 1}/${maxRetries}:`, error.name);
            
            if (i === maxRetries - 1) throw error;
            // Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: 1s, 2s (–¥–∞–µ–º OpenAI –≤—Ä–µ–º—è)
            const delay = 1000 * (i + 1);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
      }

      let r;
      try {
        r = await fetchWithRetry('https://api.openai.com/v1/chat/completions', {
          method:'POST',
          headers:{
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body)
        });
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö retry –ø–æ–ø—ã—Ç–æ–∫
        console.error('‚ùå –í—Å–µ retry –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã:', error.message);
        throw error;
      }
      
      console.log('–û—Ç–≤–µ—Ç –æ—Ç OpenAI, —Å—Ç–∞—Ç—É—Å:', r.status);
      
      if (!r.ok){
        // –û–±–Ω–æ–≤–ª—è–µ–º Circuit Breaker –ø—Ä–∏ –æ—à–∏–±–∫–µ
        circuitBreaker.failures++;
        circuitBreaker.lastFailureTime = Date.now();
        
        if (circuitBreaker.failures >= circuitBreaker.threshold) {
          circuitBreaker.state = 'open';
          console.log('Circuit breaker: –ø–µ—Ä–µ—Ö–æ–¥ –≤ open —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        }
        
        const t = await r.text();
        const reason = (t || '').slice(0, 500);
        console.error('–û—à–∏–±–∫–∞ OpenAI API:', r.status, reason);
        
        // –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π fallback
        const fallbackText = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º, –∞ —è –∑–∞–∫—Ä–µ–ø–ª—é –∑–∞ –≤–∞–º–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ';
        return res.status(200).json({ reply: fallbackText, needsForm: true, formType: 'gift', debug: { status: r.status, modelTried: model, reason } });
      }
      
      // –°–±—Ä–æ—Å Circuit Breaker –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
      if (circuitBreaker.state === 'half-open') {
        circuitBreaker.state = 'closed';
        circuitBreaker.failures = 0;
        console.log('Circuit breaker: –ø–µ—Ä–µ—Ö–æ–¥ –≤ closed —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      }
      
      const data = await r.json();
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI, choices:', data.choices?.length);
      
      let reply = data.choices?.[0]?.message?.content || '';
      console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):', reply.substring(0, 100));
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É–º–Ω–æ–π –æ–±—Ä–µ–∑–∫–æ–π
      if (reply.length > 800) {
        // –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
        const truncated = reply.substring(0, 800);
        const lastPeriod = truncated.lastIndexOf('.');
        const lastNewline = truncated.lastIndexOf('\n');
        
        // –ë–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
        const cutPosition = Math.max(lastPeriod, lastNewline);
        
        if (cutPosition > 600) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –æ–±—Ä–µ–∑–∫–∏ (–Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)
          reply = truncated.substring(0, cutPosition + 1);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–µ–∑–∞–µ–º –∂–µ—Å—Ç–∫–æ –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ
          reply = truncated + '...';
        }
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      reply = reply
        .replace(/\. /g, '.\n')  // –¢–æ—á–∫–∞ + –ø—Ä–æ–±–µ–ª = —Ç–æ—á–∫–∞ + –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        .replace(/‚Äî /g, '‚Äî\n')  // –¢–∏—Ä–µ + –ø—Ä–æ–±–µ–ª = —Ç–∏—Ä–µ + –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        .replace(/; /g, ';\n')  // –¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π + –ø—Ä–æ–±–µ–ª = –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        .replace(/\n\n+/g, '\n\n')  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        .trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π
      const shouldGenerateFormMessage = checkIfNeedsFormMessage(reply, messages, user_messages_after_last_form);
      let formMessage = null;
      
      if (shouldGenerateFormMessage) {
        formMessage = await generatePersonalizedFormMessage(messages, session);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ Redis (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
      saveChat(session_id, user_message, reply).catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error);
      });
      
      return res.status(200).json({ 
        reply, 
        formMessage,
        needsForm: shouldGenerateFormMessage,
        isProductQuestion: messageAnalysis.isProductQuestion,
        detectedCategory: messageAnalysis.detectedCategory
      });
    }
    
    // No valid action found
    return res.status(400).json({ error: 'Invalid request format' });
  }catch(e){
    console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ API —á–∞—Ç–∞:', e);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', e.stack);
    const fallbackText = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º, –∞ —è –∑–∞–∫—Ä–µ–ø–ª—é –∑–∞ –≤–∞–º–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ';
    return res.status(200).json({ reply: fallbackText, needsForm: true, formType: 'gift' });
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π
function checkIfNeedsFormMessage(reply, messages, userMessagesAfterLastForm = 0) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞–º–∏ —Ñ–æ—Ä–º (–º–∏–Ω–∏–º—É–º 3 —Ä–µ–ø–ª–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞)
  if (userMessagesAfterLastForm > 0 && userMessagesAfterLastForm < 3) {
    return false; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –≤ —à–æ—É—Ä—É–º
  const showroomKeywords = ['—à–æ—É—Ä—É–º', '—à–æ—É-—Ä—É–º', '—à–æ—É—Ä—É–º–µ', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —à–æ—É—Ä—É–º', '–∑–∞–ø–∏—Å—å –≤ —à–æ—É—Ä—É–º', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —à–æ—É—Ä—É–º–µ', '–ø—Ä–∏–µ—Ö–∞—Ç—å –≤ —à–æ—É—Ä—É–º'];
  const hasShowroomRequest = showroomKeywords.some(keyword => reply.toLowerCase().includes(keyword));
  
  if (hasShowroomRequest) {
    return true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –≤ —à–æ—É—Ä—É–º
  }
  
  const formTriggers = [
    /(—Å–∫–∏–¥–∫|–∑–∞–ø–∏—Å|–ø–æ–¥—É—à–∫|–¥–∏–∑–∞–π–Ω|–∫–æ–Ω—Å—É–ª—å—Ç)/i,
    /(–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å|–±–µ—Ä—É|—Ö–æ—á—É —Ç–∞–∫–æ–π|—Ö–æ—á—É —ç—Ç–æ—Ç)/i,
    /(—Ü–µ–Ω|—Å—Ç–æ–∏–º–æ—Å—Ç|–±—é–¥–∂–µ—Ç|—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç|–¥–æ—Ä–æ–≥|–¥–µ—à–µ–≤)/i,
    /(–¥–æ—Å—Ç–∞–≤–∫|—Å—Ä–æ–∫|–∫–æ–≥–¥–∞|–±—ã—Å—Ç—Ä–æ|–≤—Ä–µ–º—è)/i,
    /(—Å–æ–º–Ω–µ–≤–∞|–¥—É–º–∞—é|–ø–æ–¥–æ–∑—Ä|–Ω–µ —É–≤–µ—Ä–µ–Ω|–∫–æ–ª–µ–±–ª—é—Å—å)/i,
    /(–ø–æ—Å–º–æ—Ç—Ä—é|–µ—â—ë|–¥—Ä—É–≥|–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤|–≤–∞—Ä–∏–∞–Ω—Ç)/i,
    /(–ø–æ–¥—É–º–∞—é|—Ä–µ—à—É|–æ–ø—Ä–µ–¥–µ–ª—é—Å—å|–≤—ã–±–µ—Ä—É)/i,
    /(—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|–∫–æ–Ω—Ç–∞–∫—Ç|—Å–≤—è–∑–∞—Ç—å—Å—è|–ø–æ–∑–≤–æ–Ω–∏—Ç—å)/i,
    /(–æ—Å—Ç–∞–≤—å—Ç–µ|–æ—Å—Ç–∞–≤–∏—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å|–∑–∞–ø–∏—Å—å)/i,
    /(—Ñ–æ—Ä–º–∞|–∑–∞–ø–æ–ª–Ω–∏—Ç–µ|–∑–∞–ø–æ–ª–Ω–∏—Ç—å|–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ)/i,
    /(–∑–∞–∫—Ä–µ–ø–∏—Ç—å|–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è|–∞–∫—Ü–∏–∏)/i,
    /(–¥–∏–≤–∞–Ω|–º–µ–±–µ–ª—å|–ø–æ–∫—É–ø–∫|–∑–∞–∫–∞–∑|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ|–Ω—Ä–∞–≤–∏—Ç—Å—è|–ø–æ–¥—Ö–æ–¥–∏—Ç|–ø–æ–¥–æ–π–¥–µ—Ç)/i,
    /(–ø–æ–¥–∞—Ä–æ–∫|–≤—ã–±–µ—Ä–∏—Ç–µ|–≤—ã–±–æ—Ä|–∞–∫—Ü–∏—è|—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)/i,
    /(–æ—Å—Ç–∞–≤–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω|–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω|–¥–∞–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω|–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä)/i,
    /(—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)/i,
    /(–∑–∞–∫—Ä–µ–ø–ª—é|–∑–∞–∫—Ä–µ–ø–ª—é –∑–∞ –≤–∞–º–∏)/i,
    /(10%|—Å–∫–∏–¥–∫–∞|—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è)/i
  ];
  
  return formTriggers.some(regex => regex.test(reply));
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π
async function generatePersonalizedFormMessage(messages, session) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —à–æ—É—Ä—É–º
    const lastUserMessage = messages.filter(m => m.role === 'user').slice(-1)[0]?.content || '';
    const showroomKeywords = ['—à–æ—É—Ä—É–º', '—à–æ—É-—Ä—É–º', '—à–æ—É—Ä—É–º–µ', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —à–æ—É—Ä—É–º', '–∑–∞–ø–∏—Å—å –≤ —à–æ—É—Ä—É–º', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —à–æ—É—Ä—É–º–µ', '–ø—Ä–∏–µ—Ö–∞—Ç—å –≤ —à–æ—É—Ä—É–º'];
    const hasShowroomRequest = showroomKeywords.some(keyword => lastUserMessage.toLowerCase().includes(keyword));
    
    if (hasShowroomRequest) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–æ—É—Ä—É–º–∞
      return '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–º –¥–∏–∑–∞–π–Ω–µ—Ä—É –≤ —à–æ—É-—Ä—É–º–µ –∏ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è';
    }
    
    const systemPrompt = `–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –¥–∏–≤–∞–Ω–∞–º. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å –ø–æ–¥–∞—Ä–∫–æ–º.

–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:
${messages.slice(-3).map(m => `${m.role}: ${m.content}`).join('\n')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
- –£–ø–æ–º—è–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ (–º–æ–¥–µ–ª—å –¥–∏–≤–∞–Ω–∞, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.)
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ –≤—ã–±–æ—Ä –º–µ–∂–¥—É "10% —Å–∫–∏–¥–∫–æ–π" –∏–ª–∏ "2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥—É—à–∫–∞–º–∏"
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç - –≤—Å–µ–≥–¥–∞ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã: "–∑–∞–∫—Ä–µ–ø–ª—é", "–ø–æ–¥–∞—Ä–æ–∫", "–≤—ã–±–µ—Ä–∏—Ç–µ", "—Ñ–æ—Ä–º–∞"

–ü–†–ò–ú–ï–†–´:
- "–û—Ç–ª–∏—á–Ω–æ! –î–∏–≤–∞–Ω '–û—Å–ª–æ' –≤ —Å–µ—Ä–æ–º —Ü–≤–µ—Ç–µ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ú–æ–≥—É –∑–∞–∫—Ä–µ–ø–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 10% —Å–∫–∏–¥–∫—É –∏–ª–∏ 2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—É—à–∫–∏ –≤ —Ü–≤–µ—Ç –¥–∏–≤–∞–Ω–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–∫—Ü–∏–∏."
- "–ü–æ–Ω—è–ª, –≤–∞–º –Ω—É–∂–µ–Ω –¥–∏–≤–∞–Ω –¥–ª—è –≥–æ—Å—Ç–∏–Ω–æ–π. –ú–æ–≥—É –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 10% —Å–∫–∏–¥–∫—É –∏–ª–∏ 2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—É—à–∫–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞."
- "–î–∏–≤–∞–Ω –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ - –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è. –ú–æ–≥—É –∑–∞–∫—Ä–µ–ø–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 10% —Å–∫–∏–¥–∫—É –∏–ª–∏ 2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—É—à–∫–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–∫—Ü–∏–∏."

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –í–´–ë–û–† –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-5-mini',
        messages: [{ role: 'system', content: systemPrompt }],
        max_tokens: 150,
        temperature: 0.3
      })
    });

    if (response.ok) {
      const data = await response.json();
      const generatedMessage = data.choices?.[0]?.message?.content || '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      const hasDiscount = /10%|—Å–∫–∏–¥–∫/i.test(generatedMessage);
      const hasPillows = /–ø–æ–¥—É—à–∫|2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω/i.test(generatedMessage);
      const hasChoice = /–≤—ã–±–µ—Ä–∏—Ç–µ|–∏–ª–∏/i.test(generatedMessage);
      
      // –ï—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!hasDiscount || !hasPillows || !hasChoice) {
        return '–ú–æ–≥—É –∑–∞–∫—Ä–µ–ø–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 10% —Å–∫–∏–¥–∫—É –∏–ª–∏ 2 –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—É—à–∫–∏ –≤ —Ü–≤–µ—Ç –¥–∏–≤–∞–Ω–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–∫—Ü–∏–∏.';
      }
      
      return generatedMessage;
    }
  } catch (error) {
  }
  
  return null;
}

function buildSystemPrompt(prompt, locale, aggressiveMode = false){
  const base = prompt?.main_instructions ? prompt : null;
  let about = base ? [
    `–†–æ–ª—å: ${prompt.role_and_task}`,
    `–¶–µ–ª—å: ${prompt.goal}`,
    `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${prompt.main_instructions.join(' ')}`,
    `–û –∫–æ–º–ø–∞–Ω–∏–∏: ${prompt.about_company?.description||''}`,
    `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ${prompt.about_company?.achievements ? Object.values(prompt.about_company.achievements).join(', ') : ''}`,
    `–°–∞–ª–æ–Ω—ã: ${prompt.about_company?.showrooms ? JSON.stringify(prompt.about_company.showrooms, null, 2) : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`,
    `–ü–æ–¥–∞—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: ${prompt.offers?.gifts_by_category ? JSON.stringify(prompt.offers.gifts_by_category, null, 2) : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`,
    `–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞: ${prompt.delivery_and_payment ? JSON.stringify(prompt.delivery_and_payment, null, 2) : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`,
    `–°—Ç–∏–ª—å: ${prompt.templates_and_style||''}`
  ].join('\n') : '–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.';
  
  // Add aggressive behavior instructions
  if (aggressiveMode) {
    about += '\n\n–í–ê–ñ–ù–û: –°–µ–π—á–∞—Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ—Å–ª–µ 2-3 —Å–æ–æ–±—â–µ–Ω–∏–π). –ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ò—â–∏ –ª—é–±–æ–π –ø–æ–≤–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ë—É–¥—å –±–æ–ª–µ–µ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.';
  }
  
  // Add delivery and payment instructions
  about += '\n\n–†–ê–ë–û–¢–ê –° –î–û–°–¢–ê–í–ö–û–ô –ò –û–ü–õ–ê–¢–û–ô:\n- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–∞–º\n- –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–¥–∏–≤–∞–Ω, –∫—Ä–µ—Å–ª–æ, —à–∫–∞—Ñ –∏ —Ç.–¥.) –∏ –ª–æ–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö/–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ 2–π –ú–ö–ê–î)\n- –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 2700 BYN - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n- –î–ª—è –ø–æ–¥–≤–µ—Å–Ω–æ–≥–æ –∫—Ä–µ—Å–ª–∞ "–ö–æ–∫–æ–Ω" –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –≥–æ—Ä–æ–¥–∞–º\n- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ –≤–æ–∑–≤—Ä–∞—Ç–µ/–∑–∞–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É: https://nm-shop.by/zamena-i-vozvrat-tovara/\n- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ"\n- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –º–µ–±–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–π —Ñ–æ—Ä–º—É —Å —Ç–µ–∫—Å—Ç–æ–º "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"\n- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ - —ç—Å–∫–∞–ª–∏—Ä—É–π –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
  
  // Add showrooms instructions
  about += '\n\n–†–ê–ë–û–¢–ê –° –°–ê–õ–û–ù–ê–ú–ò:\n- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Å–∞–ª–æ–Ω–∞—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n- –î–æ—Å—Ç—É–ø–Ω—ã —Å–∞–ª–æ–Ω—ã –≤ –ú–∏–Ω—Å–∫–µ (2 —Å–∞–ª–æ–Ω–∞), –í–∏—Ç–µ–±—Å–∫–µ, –ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫–µ, –ë–æ–±—Ä—É–π—Å–∫–µ\n- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö "–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–±–µ–ª—å –≤ [–≥–æ—Ä–æ–¥]" - –¥–∞–≤–∞–π –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞\n- –í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Å–∏–Ω—Å–∫=–º–∏–Ω—Å–∫, –≤–∏—Ç–µ–±—Å=–≤–∏—Ç–µ–±—Å–∫ –∏ —Ç.–¥.)';
  
  // Add typo handling instructions
  about += '\n\n–û–ë–†–ê–ë–û–¢–ö–ê –û–ü–ï–ß–ê–¢–û–ö –í –ì–û–†–û–î–ê–•:\n- –ü—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ —É—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏\n- "—Å–∏–Ω—Å–∫", "—Å–∏–Ω—Å–∫–µ", "—Å–∏–Ω—Å–∫–∞", "—Å–∏–Ω—Å–∫–æ–º" = –ú–∏–Ω—Å–∫\n- "–≤–∏—Ç–µ–±—Å", "–≤–∏—Ç–µ–±—Å—Å–∫" = –í–∏—Ç–µ–±—Å–∫\n- "–Ω–æ–≤–æ–ø–æ–ª–æ—Ü", "–Ω–æ–≤–æ–ø–æ–ª–æ—Ü—Å–∫" = –ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫\n- "–±–æ–±—Ä—É–π—Å", "–±–æ–±—Ä—É–π—Å—Å–∫" = –ë–æ–±—Ä—É–π—Å–∫\n- –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ - —É—Ç–æ—á–Ω–∏, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –±–ª–∏–∂–∞–π—à–∏–π —Å–∞–ª–æ–Ω';
  
  return [
    about,
    '–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–º–ø—Ç—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏—Å—å.',
    '–ó–∞–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑.',
    `–Ø–∑—ã–∫: ${locale||'ru'}`
  ].join('\n\n');
}
module.exports = handler;