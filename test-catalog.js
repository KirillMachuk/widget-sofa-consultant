// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞
// –ó–∞–ø—É—Å–∫: node test-catalog.js

const catalogHandler = require('./api/catalog');

// –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
async function testCatalog() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...\n');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –¥–∏–≤–∞–Ω–æ–≤
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–∏–≤–∞–Ω–æ–≤:');
    const sofaRequest = {
      method: 'POST',
      body: JSON.stringify({
        action: 'search',
        query: '–¥–∏–≤–∞–Ω —Å–µ—Ä—ã–π',
        filters: { limit: 5 }
      })
    };
    
    const mockReq = {
      method: 'POST',
      body: JSON.stringify({
        action: 'search',
        query: '–¥–∏–≤–∞–Ω —Å–µ—Ä—ã–π',
        filters: { limit: 5 }
      })
    };
    
    const mockRes = {
      status: (code) => ({ json: (data) => console.log(`–°—Ç–∞—Ç—É—Å: ${code}`, data) }),
      setHeader: () => {},
      json: (data) => console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data)
    };
    
    await catalogHandler(mockReq, mockRes);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testCatalog();
