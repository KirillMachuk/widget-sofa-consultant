// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
// –ó–∞–ø—É—Å–∫: node test-catalog-detailed.js

async function testCatalogDetailed() {
  console.log('üß™ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...\n');
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ nm-shop.by...');
    const CATALOG_URL = 'https://nm-shop.by/index.php?route=extension/feed/yandex_yml_cht';
    
    const response = await fetch(CATALOG_URL);
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   Content-Type:', response.headers.get('content-type'));
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const xmlText = await response.text();
    console.log('   –†–∞–∑–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞:', Math.round(xmlText.length / 1024), 'KB');
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML
    console.log('\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞...');
    const offerMatches = xmlText.match(/<offer[^>]*>/g);
    console.log('   –ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤:', offerMatches ? offerMatches.length : 0);
    
    // –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    console.log('\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...');
    const keywords = ['–¥–∏–≤–∞–Ω', '–µ–≤—Ä–æ–∫–Ω–∏–∂–∫–∞', '–∫—Ä–µ—Å–ª–æ', '–ø–æ–¥–≤–µ—Å–Ω–æ–µ'];
    keywords.forEach(keyword => {
      const count = (xmlText.toLowerCase().match(new RegExp(keyword, 'g')) || []).length;
      console.log(`   "${keyword}": ${count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
    });
    
    // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    const catalogModule = require('./api/catalog');
    
    // –°–æ–∑–¥–∞–µ–º mock –¥–ª—è req/res
    const mockReq = {
      method: 'POST',
      body: {
        action: 'search',
        query: '–¥–∏–≤–∞–Ω –µ–≤—Ä–æ–∫–Ω–∏–∂–∫–∞',
        filters: { limit: 5 }
      }
    };
    
    const results = [];
    const mockRes = {
      setHeader: () => {},
      status: (code) => ({
        json: (data) => {
          console.log('   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', code);
          console.log('   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.totalFound || 0);
          if (data.offers && data.offers.length > 0) {
            console.log('   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
            data.offers.slice(0, 3).forEach((offer, i) => {
              console.log(`   ${i+1}. ${offer.name} - ${offer.price} ${offer.currency}`);
            });
          }
          results.push(data);
        },
        end: () => {}
      }),
      json: (data) => {
        console.log('   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200');
        console.log('   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.totalFound || 0);
        if (data.offers && data.offers.length > 0) {
          console.log('   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
          data.offers.slice(0, 3).forEach((offer, i) => {
            console.log(`   ${i+1}. ${offer.name} - ${offer.price} ${offer.currency}`);
          });
        }
        results.push(data);
      }
    };
    
    await catalogModule(mockReq, mockRes);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('–°—Ç–µ–∫:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫
testCatalogDetailed().catch(console.error);

